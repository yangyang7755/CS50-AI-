import logic

AKnight = Symbol("A is a Knight")
AKnave = Symbol("A is a Knave")

BKnight = Symbol("B is a Knight")
BKnave = Symbol("B is a Knave")

CKnight = Symbol("C is a Knight")
CKnave = Symbol("C is a Knave")

# Puzzle 0
# A says "I am both a knight and a knave."
knowledge0 = And(
    # A is either a knight or a knave
    Or(AKnight,AKnave),
    # If A is a knight he is not a knave
    Implication(AKnight, Not(AKnave)),
    # If A is a knave he is not a knight
    Implication(AKnave, Not(AKnight)),
    # Precondition that only when A is a knight he can be either a knight/knave
    Biconditional(Aknight, And(AKnight, AKnave))
)

# Puzzle 1
# A says "We are both knaves."
# B says nothing.
knowledge1 = And(
    # A is a knight or a knave
    # B is a knight or a knave
    Or (AKnight, AKnave),
    Or (BKnight, BKnave),
    # A cannot be both knight and knave at the same time
    Implication (AKnight, Not(AKnave)),
    Implication (AKnave, Not(AKnight)),
    # Same for B
    Implication (BKnight, Not(BKnave)),
    Implication (BKnave, Not(BKnight)),
    # Knaves always lie

)

# Puzzle 2
# A says "We are the same kind."
# B says "We are of different kinds."
knowledge2 = And(
    # A is a knight or a knave
    # B is a knight or a knave
    Or (AKnight, AKnave),
    Or (BKnight, BKnave),
    # A is knave, therefore B is a knight
    Implication(AKnave, Not(BKnight)),
    # A is knight, therefore B is a knight
    Implication(AKnight, Not(BKnave)),
    #


)

# Puzzle 3
# A says either "I am a knight." or "I am a knave.", but you don't know which.
# B says "A said 'I am a knave'."
# B says "C is a knave."
# C says "A is a knight."
knowledge3 = And(
    # A is a knight or a knave
    # B is a knight or a knave
    # C is a knight or a knave
    Or (AKnight, AKnave),
    Or (BKnight, BKnave),
    Or (CKnight, CKnave),
    # C is a knave so B is not a knave
    Implication (CKnave, Not(BKnave)),
    Implication (Not(CKnave, BKnave)),
    # A is a knight so C is not a knave
    Implication (AKnight, Not(CKnave)),
    Implication (Not(AKnight, CKnave)),

)


def main():
    symbols = [AKnight, AKnave, BKnight, BKnave, CKnight, CKnave]
    puzzles = [
        ("Puzzle 0", knowledge0),
        ("Puzzle 1", knowledge1),
        ("Puzzle 2", knowledge2),
        ("Puzzle 3", knowledge3)
    ]
    for puzzle, knowledge in puzzles:
        print(puzzle)
        if len(knowledge.conjuncts) == 0:
            print("    Not yet implemented.")
        else:
            for symbol in symbols:
                if model_check(knowledge, symbol):
                    print(f"    {symbol}")


if __name__ == "__main__":
    main()
